"""
Given two integers num1 and num2, return the sum of the two integers.
-100 <= num1, num2 <= 100
https://leetcode.com/problems/add-two-integers/description/
"""

import unittest


def sum_of_two(num1: int, num2: int) -> int:
    """
    Функция принимает два целых числа и возвращает их сумму.
    :param num1: первое слагаемое
    :param num2: второе слагаемое
    :return: int - сумма
    """
    return num1 + num2


"""
Позитивные тесты
Два слагаемых хорошо подходят для применения доменного тестирования
"""

"""Тест проверяет сумму, где первое слагаемое равно минимальному значению."""
assert sum_of_two(-100, 50) == -50

"""Тест проверяет сумму, где второе слагаемое равно максимальному значению."""
assert sum_of_two(-50, 100) == 50

"""Тест с первым слагаемым, равным нулю."""
assert sum_of_two(0, -50) == -50

"""Тест со вторым слагаемым, равным нулю."""
assert sum_of_two(50, 0) == 50

"""Тест с первым слагаемым, равным наибольшему отрицательному значению."""
assert sum_of_two(-1, 50) == 49

"""Тест с первым слагаемым, равным наимнеьшему положительному значению."""
assert sum_of_two(1, -50) == -49

"""Тест со вторым слагаемым, равным наименьшему положительму значению."""
assert sum_of_two(-50, 1) == -49

"""Тест со вторым слагаемым, равным наибольшему отрицательному значению."""
assert sum_of_two(50, -1) == 49

"""
Негативные тесты.
В функции нет обработки данных или ошибок.
"""

"""Тест проверяет нечисловой тип данных"""


class TestNotNumeric(unittest.TestCase):
    def test_not_numirec(self):
        with self.assertRaises(TypeError):
            sum("5", None)


"""
Тест проверяет сумму, где первое слагаемое меньше минимального значения. 
Бесполезно без обработки входных данных.
"""
assert sum_of_two(-101, -50) == -151

"""
Тест проверяет сумму, где второе слагаемое больше максимального значения.
Бесполезно без обработки входных данных.
"""
assert sum_of_two(50, 101) == 151

"""
Тест проверяет сумму, в которой оба слагаемые - большие числа.
Бесполезно без обработки входных данных.
"""
assert -1 == sum(2147483647, -2147483648)
